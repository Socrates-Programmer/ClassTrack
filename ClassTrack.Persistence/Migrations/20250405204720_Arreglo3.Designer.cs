// <auto-generated />
using System;
using ClassTrack.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassTrack.Persistence.Migrations
{
    [DbContext(typeof(DbUniversidadContext))]
    [Migration("20250405204720_Arreglo3")]
    partial class Arreglo3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassTrack.Domain.Entities.AreaConocimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartamentoID")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoID");

                    b.ToTable("AreaConocimientos");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.Asignatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaConocimientoId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CreditosPracticos")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CreditosTeoricos")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Curso")
                        .HasColumnType("int");

                    b.Property<string>("Duracion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LibreConfiguracion")
                        .HasColumnType("bit");

                    b.Property<int>("LimiteAdmision")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaConocimientoId");

                    b.ToTable("Asignaturas");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.Docencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AsignaturaID")
                        .HasColumnType("int");

                    b.Property<int>("ProfesorID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaID");

                    b.HasIndex("ProfesorID");

                    b.ToTable("Docencias");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.EquivalenciaAsignatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AsignaturaID1")
                        .HasColumnType("int");

                    b.Property<int>("AsignaturaID2")
                        .HasColumnType("int");

                    b.Property<int>("AsignaturaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaId");

                    b.ToTable("EquivalenciaAsignaturas");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.Grupos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AsignaturaID")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaID");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.HorarioConsulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Dia")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<int>("ProfesorID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfesorID");

                    b.ToTable("HorarioConsultas");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.IncompatibilidadAsignatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AsignaturaID1")
                        .HasColumnType("int");

                    b.Property<int>("AsignaturaID2")
                        .HasColumnType("int");

                    b.Property<int>("AsignaturaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaId");

                    b.ToTable("IncompatibilidadAsignaturas");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.Profesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaConocimientoId")
                        .HasColumnType("int");

                    b.Property<string>("Despacho")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaConocimientoId");

                    b.ToTable("Profesores");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.Titulacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Titulaciones");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.AreaConocimiento", b =>
                {
                    b.HasOne("ClassTrack.Domain.Entities.Departamento", "Departamento")
                        .WithMany("AreaConocimientos")
                        .HasForeignKey("DepartamentoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.Asignatura", b =>
                {
                    b.HasOne("ClassTrack.Domain.Entities.AreaConocimiento", "AreaConocimiento")
                        .WithMany("Asignaturas")
                        .HasForeignKey("AreaConocimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaConocimiento");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.Docencia", b =>
                {
                    b.HasOne("ClassTrack.Domain.Entities.Asignatura", "Asignatura")
                        .WithMany("Docencias")
                        .HasForeignKey("AsignaturaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClassTrack.Domain.Entities.Profesor", "Profesor")
                        .WithMany("Docencias")
                        .HasForeignKey("ProfesorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asignatura");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.EquivalenciaAsignatura", b =>
                {
                    b.HasOne("ClassTrack.Domain.Entities.Asignatura", "Asignatura")
                        .WithMany()
                        .HasForeignKey("AsignaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignatura");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.Grupos", b =>
                {
                    b.HasOne("ClassTrack.Domain.Entities.Asignatura", "Asignatura")
                        .WithMany("Grupos")
                        .HasForeignKey("AsignaturaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignatura");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.HorarioConsulta", b =>
                {
                    b.HasOne("ClassTrack.Domain.Entities.Profesor", "Profesor")
                        .WithMany("HorarioConsultas")
                        .HasForeignKey("ProfesorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.IncompatibilidadAsignatura", b =>
                {
                    b.HasOne("ClassTrack.Domain.Entities.Asignatura", "Asignatura")
                        .WithMany()
                        .HasForeignKey("AsignaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignatura");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.Profesor", b =>
                {
                    b.HasOne("ClassTrack.Domain.Entities.AreaConocimiento", "AreaConocimiento")
                        .WithMany("Profesores")
                        .HasForeignKey("AreaConocimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaConocimiento");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.AreaConocimiento", b =>
                {
                    b.Navigation("Asignaturas");

                    b.Navigation("Profesores");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.Asignatura", b =>
                {
                    b.Navigation("Docencias");

                    b.Navigation("Grupos");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.Departamento", b =>
                {
                    b.Navigation("AreaConocimientos");
                });

            modelBuilder.Entity("ClassTrack.Domain.Entities.Profesor", b =>
                {
                    b.Navigation("Docencias");

                    b.Navigation("HorarioConsultas");
                });
#pragma warning restore 612, 618
        }
    }
}
